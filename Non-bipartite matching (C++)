Non-bipartite matching (C++)
// maximum matching (graph not necessarily bipartite)
// whatever code uses this needs to set N in main()
// author claims N^4 running time

#define PB push_back
#define SZ(x) ((int)(x).size())
#define REP(i, n) for(int i=0; i<n; ++i)
#define FOR(i, b, e) for(typeof(e) i=b; i!=e; ++i)
 
int N; // the number of vertices in the graph
 
typedef vector<int> VI;
typdef vector< vector<int> > VVI;

VI match;
VI vis;
 
void couple(int n, int m) { match[n]=m; match[m]=n; }
 
// returns true if something interesting has been found, thus a
// augmenting path or a blossom (if blossom is non-empty).
// the dfs returns true from the moment the stem of the flower is
// reached and thus the base of the blossom is an unmatched node.
// blossom should be empty when dfs is called and 
// contains the nodes of the blossom when a blossom is found.
bool dfs(int n, VVI &conn, VI &blossom) {
  vis[n]=0;
  REP(i, N) if(conn[n][i]) {
    if(vis[i]==-1) {
      vis[i]=1;
      if(match[i]==-1 || dfs(match[i], conn, blossom)) { couple(n,i); return true; }
    }
    if(vis[i]==0 || SZ(blossom)) {  // found flower
      blossom.PB(i); blossom.PB(n);
      if(n==blossom[0]) { match[n]=-1; return true; }
      return false;
    }
  }
  return false;
}
 
// search for an augmenting path.
// if a blossom is found build a new graph (newconn) where the
// (free) blossom is shrunken to a single node and recurse.
// if a augmenting path is found it has already been augmented
// except if the augmented path ended on the shrunken blossom.
// in this case the matching should be updated along the appropriate
// direction of the blossom.
bool augment(VVI &conn) {
  REP(m, N) if(match[m]==-1) {
    VI blossom;
    vis=VI(N,-1);
    if(!dfs(m, conn, blossom)) continue;
    if(SZ(blossom)==0) return true; // augmenting path found
 
// blossom is found so build shrunken graph
    int base=blossom[0], S=SZ(blossom);
    VVI newconn=conn;
    FOR(i, 1, S-1) REP(j, N) newconn[base][j]=newconn[j][base]|=conn[blossom[i]][j];
    FOR(i, 1, S-1) REP(j, N) newconn[blossom[i]][j]=newconn[j][blossom[i]]=0;
    newconn[base][base]=0; // is now the new graph
    if(!augment(newconn)) return false;
    int n=match[base];
 
// if n!=-1 the augmenting path ended on this blossom
 
    if(n!=-1) REP(i, S) if(conn[blossom[i]][n]) {
      couple(blossom[i], n);
      if(i&1) for(int j=i+1; j<S; j+=2) couple(blossom[j],blossom[j+1]);
      else for(int j=0; j<i; j+=2) couple(blossom[j],blossom[j+1]);
      break;
    }
    return true;
  }
  return false;
}
 
// conn should have N VI's, each of length N.  conn[i][j] = 1 if (i,j) is an
// edge, and conn[i][j] = 0 otherwise.  returns the number of edges in a max
// matching.
int edmonds(VVI &conn) {
  int res=0;
  match=VI(N,-1);
  while(augment(conn)) res++;
  return res;
}
